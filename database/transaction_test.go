package database_test

import (
	"testing"

	"github.com/MonikaCat/eth-parser/database"
	"github.com/MonikaCat/eth-parser/types"
)

func TestSaveTransaction(t *testing.T) {
	// Create a new database configuration
	cfg := database.DatabaseConfig{
		DNS:                "test.db",
		MaxOpenConnections: 20,
		MaxIdleConnections: 10,
	}

	// Create a new instance of the database
	db, err := database.ConnectToDatabase(cfg)
	if err != nil {
		t.Errorf("Failed to connect to db: %v", err)
	}

	// Create a sample block
	block := types.Block{
		BlockNumber:           "0x1349fa2",
		BlockHash:             "0xe9db63650e35813afebe410cdc4f0d4f01af11c5e86ba22d2ce63a9f26175d96",
		ParentHash:            "0x519789f08f6a83ad3265e44af18e9a098b73fc19f3b7c06ce99c07cee4f6ddce",
		Nonce:                 "0x0",
		Miner:                 "0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97",
		BaseFeePerGas:         "0x3bdec102f",
		BlobGasUsed:           "0x80000",
		Difficulty:            "0x0",
		ExcessBlobGas:         "0x360000",
		ExtraData:             "0x546974616e2028746974616e6275696c6465722e78797a29",
		GasLimit:              "0x1c9c380",
		GasUsed:               "0x174c26d",
		LogsBloom:             "0xf6231116318b01cc4749a278f913f9a07da82d4d695c6a865b61a0604c1ee563a0b1a5c8a029126ce3966f758be709958343941cbb077a229791e56a713eec84fd9a560959da458d789cc24a8adcf02a170098cda7c409bc6bcbee14983cd9205e7f6646a7e4a0af241cd7b44c390f17a21f1f314019aeb087200a1f78a9a65f63aaa7e9191a42c8ee48b1042af0c5aac1b63465553900a921ace946747bf2b182be15abb2bf745036afbadf89d71b88044fa318521130871cb489f7925e726db1a00673185145d2cacf8314417bd0b11a21665ed6e32957340a7b16884de70514536ee82705e58d00af1de1a5797d5e0f3cb1129b73aec0b108fd1ef415d58c",
		MixHash:               "0xcef5592ad3e55dd5db89c310840c445a709278cccfaf55488b6606c241d10d24",
		ParentBeaconBlockRoot: "0xe2852a0ec439273a5526f1997f16329b517b170c9c3f0772c59a3dd9519e47cc",
		ReceiptsRoot:          "0x4158c96fd59a0c5d96dfe31414835d6a91afc55288f49697f673fc3f57c524cc",
		Sha3Uncles:            "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
		BlockSize:             "0x1a636",
		StateRoot:             "0x140f873db76ca158deb8f2e76a12b81840179b747f11398fe481a3b6aef6906c",
		Timestamp:             "0x668542a3",
		TotalDifficulty:       "0xc70d815d562d3cfa955",
	}

	// Create a sample tx
	tx := types.Transaction{
		BlockNumber:          "0x1349fa2",
		BlockHash:            "0xe9db63650e35813afebe410cdc4f0d4f01af11c5e86ba22d2ce63a9f26175d96",
		From:                 "0x4eb0C4050928528E138521DdfB1735A7A9BF187d",
		To:                   "0x3df82eFF8d4F92b380689fe723cE9E0511bDbbD4",
		TransactionHash:      "0xb8ac39c8cc5858d0421ee54b792b45ca8db09a841281538621bf2aa86db09de6",
		TransactionIndex:     "0x11",
		Value:                "0x7a120",
		Type:                 "0x2",
		ChainID:              "0x1",
		Gas:                  "0xe44a8",
		GasPrice:             "0x433b3cac2",
		MaxFeePerGas:         "0x433b3cac2",
		MaxPriorityFeePerGas: "0x33dcc93b",
		InputData:            "675151b20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000005e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000d200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000032e0000000000000000000000000000000000000000000000000000000000000a6b00000000000000000000000000000000000000000000000000000000000010a8000000000000000000000000000000000000000000000000000000000000149000000000000000000000000000000000000000000000000000000000000015cd000000000000000000000000000000000000000000000000000000000000171e000000000000000000000000000000000000000000000000000000000000174100000000000000000000000000000000000000000000000000000000000018ec0000000000000000000000000000000000000000000000000000000000001adec00000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000054c00000000000000000000000000000000000000000000000000000000000005d200000000000000000000000000000000000000000000000000000000000010440000000000000000000000000000000000000000000000000000000000001b
		Nonce:                "0x213",
		AccessList:           "[]",
		V:                    "0x1",
		R:                    "0x7868610750d68c80de5b94ceb17e56a96e98030cd25f5b2cbc29ecffb08a6af",
		S:                    "0x5dcafc77ef2bfeed931dd163f38f21a7847a1ee0dfd22f7d0b442024b3fded3f",
		YPairity:             "0x1",
	}

	// Save the block to the database
	err = db.SaveBlock(block)
	if err != nil {
		t.Errorf("Failed to save block: %v", err)
	}

	// Save the tx to the database
	err = db.SaveTransaction(tx)
	if err != nil {
		t.Errorf("Failed to save tx: %v", err)
	}

	// Retrieve the saved tx from the database
	savedTx, err := db.GetTransactionsByBlock(tx.BlockNumber)
	if err != nil {
		t.Errorf("Failed to retrieve tx: %v", err)
	}

	// Compare the retrieved tx with the original tx
	if savedTx.BlockNumber != tx.BlockNumber ||
		savedTx.BlockHash != tx.BlockHash ||
		savedTx.From != tx.From ||
		savedTx.To != tx.To ||
		savedTx.TransactionHash != tx.TransactionHash ||
		savedTx.TransactionIndex != tx.TransactionIndex ||
		savedTx.Value != tx.Value ||
		savedTx.Type != tx.Type ||
		savedTx.ChainID != tx.ChainID ||
		savedTx.Gas != tx.Gas ||
		savedTx.GasPrice != tx.GasPrice ||
		savedTx.MaxFeePerGas != tx.MaxFeePerGas ||
		savedTx.MaxPriorityFeePerGas != tx.MaxPriorityFeePerGas ||
		savedTx.InputData != tx.InputData ||
		savedTx.Nonce != tx.Nonce ||
		savedTx.AccessList != tx.AccessList ||
		savedTx.V != tx.V ||
		savedTx.R != tx.R ||
		savedTx.S != tx.S ||
		savedTx.YPairity != tx.YPairity {
		t.Errorf("Retrieved tx does not match original tx")
	}
}
